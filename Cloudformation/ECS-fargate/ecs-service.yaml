AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: The name of the environment to add this service to
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id for ALB Target group
  ECSClusterName:
    Type: String
    Default: Default
    Description: ECS Cluster name
  ServiceName:
    Type: String
    Default: nginx
    Description: A name for the service
  ContainerSecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: ECS Container Security Group(s)
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Launch ECS Service in these private subnets
  ALBListenerArn:
    Type: String
    Description: The ARN of the public load balancer's Listener
  ALBHostedZoneID:
    Type: String
    Description: Hosted zone ID from the ALB
  ALBDNSName:
    Type: String
    Description: DNS name from the ALB
  AutoscalingRoleArn:
    Type: String
    Description: The ARN of the role used for autoscaling
  ImageUrl:
    Type: String
    Default: nginx
    Description:
      The url of a docker image that contains the application process that
      will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 8000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  HostedZoneName:
    Type: String
    Description: Route53 Hosted Zone Name, e.g. "example.com."
  HostName:
    Type: String
    Description: >
      Public host name for ALB, e.g. "customer1". This name will be
      pre-pended to the Hosted Zone Name to make "customer1.example.com." for example. 
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.
  HealthCheckPath:
    Type: String
    Default: "/"
    Description: Health check path, e.g. /health
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description:
      (Optional) An IAM role to give the service's containers if the code within needs to
      access other AWS resources like S3 buckets, DynamoDB tables, etc
  ExecutionRoleArn:
    Type: String
    Description: Task Execution Role ARN
  EnvVar1:
    Type: String
    Description: First environment variable value to pass to the service
  EnvVar2:
    Type: String
    Description: Second environment variable value to pass to the service 

Conditions:
  HasCustomRole: !Not [!Equals [!Ref "Role", ""]]

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ExecutionRoleArn
      TaskRoleArn:
        Fn::If:
          - HasCustomRole
          - !Ref Role
          - !Ref AWS::NoValue
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ImageUrl
          Environment:
            - Name: TEST_ENV
              Value: !Ref EnvVar1
            - Name: TEST_ENV_2
              Value: !Ref EnvVar2
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: ALBListenerRule
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ECSClusterName
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: !Ref ContainerSecurityGroupId
          Subnets: !Ref PrivateSubnets
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  # Create a rule on the load balancer for routing traffic to the target group
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: host-header
          Values: 
            - !Sub ${HostName}.${HostedZoneName}
      ListenerArn: !Ref ALBListenerArn
      Priority: !Ref Priority

  # Enable autoscaling for this service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref ECSClusterName
            - !Ref ServiceName
      MinCapacity: 2
      MaxCapacity: 10
      RoleARN: !Ref AutoscalingRoleArn

  # Create scaling policies for the service
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - "/"
          - - scale
            - !Ref EnvironmentName
            - !Ref ServiceName
            - down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref ECSClusterName
            - !Ref ServiceName
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: Average
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - "/"
          - - scale
            - !Ref EnvironmentName
            - !Ref ServiceName
            - up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref ECSClusterName
            - !Ref ServiceName
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: Average
        Cooldown: 60

  # Create alarms to trigger these policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - "-"
          - - low-cpu
            - !Ref EnvironmentName
            - !Ref ServiceName
      AlarmDescription:
        Fn::Join:
          - " "
          - - "Low CPU utilization for service"
            - !Ref "ServiceName"
            - "in environment"
            - !Ref "EnvironmentName"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref ServiceName
        - Name: ClusterName
          Value: !Ref ECSClusterName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - "-"
          - - high-cpu
            - !Ref EnvironmentName
            - !Ref ServiceName
      AlarmDescription:
        Fn::Join:
          - " "
          - - "High CPU utilization for service"
            - !Ref "ServiceName"
            - "in environment"
            - !Ref "EnvironmentName"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref ServiceName
        - Name: ClusterName
          Value: !Ref ECSClusterName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy

  PublicLoadBalancerRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      Comment: Load Balancer alias record
      RecordSets:
        - Name: !Sub ${HostName}.${HostedZoneName}
          Type: A
          AliasTarget:
            HostedZoneId: !Ref ALBHostedZoneID
            DNSName: !Ref ALBDNSName